import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind
import numpy as np
import statsmodels.api as sm
import os

# Define the output directory path
output_dir = r'wherever you want to export the graphs'

# Load the CSV files for Control (df_1) or Exp (df_2), these files are the results of the processed data file code (https://github.com/KravitzLab/KreedLabWiki/blob/main/PythonNotebooks/Bandit-Task-Analysis%20to%20process%20data%20files) 
results_df_1 = pd.read_csv('pathway to df1')  # Control group
results_df_1 = pd.read_csv('pathway to df2')  # Exp group


# Combine both datasets into a single DataFrame, separate df1 as the control, df2 as the experimental group
results_df_1['Group'] = 'Control'
results_df_2['Group'] = 'Exp'
combined_df = pd.concat([results_df_1, results_df_2])


# DataFrame to store p-values
p_values_df = pd.DataFrame(columns=['Variable', 'T-test p-value'])

columns = results_df_1.columns[1:15].to_list()
# Main plotting loop
for column in columns:
    # --- Box Plot ---
    plt.figure(figsize=(6, 8))

    # Prepare data for plotting
    data_control = results_df_1[column].dropna()
    data_exp = results_df_2[column].dropna()

    # Box plot the control and the exp group in respective grey and indian red
    sns.boxplot(x=['Control'] * len(data_control) + ['exp'] * len(data_exp),
                y=list(data_control) + list(data_exp),
                palette=['grey', 'indianred'], linewidth=1.5, width=0.3)

    # Add individual data points (sometimes not necessary for boxplots, but a personnal preference) 
    sns.stripplot(x=['Control'] * len(data_control) + ['Exp'] * len(data_exp),
                  y=list(data_control) + list(data_exp),
                  jitter=False, size=15, color='white', edgecolor='black', linewidth=2, alpha=0.5)

    # Run t-test with aspin-welch correction (unequal variance)
    # You can change to equal_var=True if you checked the variance and know they are all equal for each parameters 
    t_stat, ttest_p_value = ttest_ind(data_control, data_exp, equal_var=False)

    # Set y-axis limits and annotate p-value
    ymin = 0
    ymax = max(max(data_control), max(data_exp)) + 0.1 * max(max(data_control), max(data_exp))
    plt.ylim([ymin, ymax])
    p_text = 'p-value:\n <0.001' if ttest_p_value < 0.001 else f'p-value:\n {ttest_p_value:.3f}'
    plt.text(0.5, ymax, p_text, fontsize=12, color='red' if ttest_p_value < 0.05 else 'black', ha='center')

    # Set plot titles and labels
    plt.ylabel(column, fontsize=18)
    plt.xlabel("Group", fontsize=18)
    plt.xticks(ticks=[0, 1], labels=["Control", "EXP"], fontsize=18)
    sns.despine()

    # Save box plot as a separate PDF
    box_plot_path = os.path.join(output_dir, f'Box_Plot_{column}.pdf')
    plt.savefig(box_plot_path)
    plt.show()

    # Store p-value from t-test
    new_row = pd.DataFrame({
        'Variable': [column],
        'T-test p-value': [ttest_p_value],
        'Linear Regression Weight p-value': [np.nan],
        'Linear Regression Glucose p-value': [np.nan]
    })
    p_values_df = pd.concat([p_values_df, new_row], ignore_index=True)

   
